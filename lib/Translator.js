// Generated by CoffeeScript 1.6.3
(function() {
  var Translator, pluralForms;

  pluralForms = require('./pluralForms');

  Translator = (function() {
    Translator.prototype.directory = '/app/lang';

    Translator.prototype.language = null;

    Translator.prototype.plurals = null;

    Translator.prototype.replacements = null;

    Translator.prototype.data = null;

    function Translator(directory) {
      var data, language;
      this.directory = directory != null ? directory : this.directory;
      this.plurals = {};
      this.replacements = {};
      this.data = {};
      for (language in pluralForms) {
        data = pluralForms[language];
        this.addPluralForm(language, data.count, data.form);
      }
    }

    Translator.prototype.addPluralForm = function(language, count, form) {
      this.plurals[language] = {
        count: count,
        form: form
      };
      return this;
    };

    Translator.prototype.addReplacement = function(search, replacement) {
      this.replacements[search] = replacement;
      return this;
    };

    Translator.prototype.removeReplacement = function(search) {
      if (typeof this.replacements[search] === 'undefined') {
        throw new Error('Replacement ' + search + ' was not found');
      }
      delete this.replacements[search];
      return this;
    };

    Translator.prototype.loadCategory = function(path, name) {
      var categoryName, data, e;
      categoryName = path + '/' + name;
      if (typeof this.data[categoryName] === 'undefined') {
        name = path + '/' + this.language + '.' + name;
        try {
          data = require(this.directory + '/' + name);
          this.data[categoryName] = this.normalizeTranslations(data);
        } catch (_error) {
          e = _error;
          return {};
        }
      }
      return this.data[categoryName];
    };

    Translator.prototype.normalizeTranslations = function(translations) {
      var buf, name, result, sub, t, translation, _i, _j, _len, _len1;
      result = {};
      for (name in translations) {
        translation = translations[name];
        if (typeof translation === 'string') {
          result[name] = [translation];
        } else if (Object.prototype.toString.call(translation) === '[object Array]') {
          result[name] = [];
          for (_i = 0, _len = translation.length; _i < _len; _i++) {
            t = translation[_i];
            if (typeof t === 'object') {
              buf = [];
              for (_j = 0, _len1 = t.length; _j < _len1; _j++) {
                sub = t[_j];
                if (/^\#.*\#$/.test(sub) === false) {
                  buf.push(sub);
                }
              }
              result[name].push(buf);
            } else {
              if (/^\#.*\#$/.test(t) === false) {
                result[name].push(t);
              }
            }
          }
        }
      }
      return result;
    };

    Translator.prototype.findTranslation = function(message) {
      var data, info;
      info = this.getMessageInfo(message);
      data = this.loadCategory(info.path, info.category);
      if (typeof data[info.name] === 'undefined') {
        return null;
      } else {
        return data[info.name];
      }
    };

    Translator.prototype.translate = function(message, count, args) {
      var match, translation;
      if (count == null) {
        count = null;
      }
      if (args == null) {
        args = {};
      }
      if (this.language === null) {
        throw new Error('You have to set language');
      }
      if (typeof message !== 'string') {
        return message;
      }
      if (count !== null) {
        args.count = count;
      }
      if ((match = message.match(/^\:(.*)\:$/)) !== null) {
        message = match[1];
      } else {
        message = this.applyReplacements(message, args);
        translation = this.findTranslation(message);
        if (translation !== null) {
          message = this.pluralize(message, translation, count);
        }
      }
      message = this.prepareTranslation(message, args);
      return message;
    };

    Translator.prototype.translatePairs = function(message, key, value, count, args) {
      var i, k, result, _i, _len;
      if (count == null) {
        count = null;
      }
      if (args == null) {
        args = {};
      }
      key = "" + message + "." + key;
      value = "" + message + "." + value;
      key = this.translate(key, count, args);
      value = this.translate(value, count, args);
      if (Object.prototype.toString.call(key) !== '[object Array]' || Object.prototype.toString.call(value) !== '[object Array]') {
        throw new Error('Translations are not arrays');
      }
      if (key.length !== value.length) {
        throw new Error('Keys and values translations have not got the same length');
      }
      result = {};
      for (i = _i = 0, _len = key.length; _i < _len; i = ++_i) {
        k = key[i];
        result[k] = value[i];
      }
      return result;
    };

    Translator.prototype.pluralize = function(message, translation, count) {
      var n, plural, pluralForm, result, t, _i, _j, _len, _len1;
      if (count == null) {
        count = null;
      }
      if (count !== null) {
        if (typeof translation[0] === 'string') {
          pluralForm = 'n=' + count + ';plural=+(' + this.plurals[this.language].form + ');';
          n = null;
          plural = null;
          eval(pluralForm);
          message = plural !== null && typeof translation[plural] !== 'undefined' ? translation[plural] : translation[0];
        } else {
          result = [];
          for (_i = 0, _len = translation.length; _i < _len; _i++) {
            t = translation[_i];
            result.push(this.pluralize(message, t, count));
          }
          message = result;
        }
      } else {
        if (typeof translation[0] === 'string') {
          message = translation[0];
        } else {
          message = [];
          for (_j = 0, _len1 = translation.length; _j < _len1; _j++) {
            t = translation[_j];
            message.push(t[0]);
          }
        }
      }
      return message;
    };

    Translator.prototype.prepareTranslation = function(message, args) {
      var m, result, _i, _len;
      if (args == null) {
        args = {};
      }
      if (typeof message === 'string') {
        message = this.applyReplacements(message, args);
      } else {
        result = [];
        for (_i = 0, _len = message.length; _i < _len; _i++) {
          m = message[_i];
          result.push(this.prepareTranslation(m, args));
        }
        message = result;
      }
      return message;
    };

    Translator.prototype.applyReplacements = function(message, args) {
      var name, pattern, replacements, value;
      if (args == null) {
        args = {};
      }
      replacements = this.replacements;
      for (name in args) {
        value = args[name];
        replacements[name] = value;
      }
      for (name in replacements) {
        value = replacements[name];
        if (value !== false) {
          pattern = new RegExp('%' + name + '%', 'g');
          message = message.replace(pattern, value);
        }
      }
      return message;
    };

    Translator.prototype.getMessageInfo = function(message) {
      var category, name, num, path, result;
      num = message.lastIndexOf('.');
      path = message.substr(0, num);
      name = message.substr(num + 1);
      num = path.lastIndexOf('.');
      category = path.substr(num + 1);
      path = path.substr(0, num).replace(/\./g, '/');
      result = {
        path: path,
        category: category,
        name: name
      };
      return result;
    };

    return Translator;

  })();

  module.exports = Translator;

}).call(this);
