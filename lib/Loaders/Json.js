// Generated by CoffeeScript 1.6.3
(function() {
  var Json, Loader, callsite, isWindow, path,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Loader = require('./Loader');

  isWindow = typeof window !== 'undefined';

  if (!isWindow) {
    callsite = require('callsite');
    path = require('path');
  }

  Json = (function(_super) {
    __extends(Json, _super);

    Json.prototype.directory = '/app/lang';

    function Json(directory) {
      var directoryOrLoader, stack;
      this.directory = directory != null ? directory : this.directory;
      if (this.directory.charAt(0) === '.' && isWindow) {
        throw new Error('Relative paths to dictionaries is not supported in browser.');
      }
      if (this.directory.charAt(0) === '.') {
        stack = callsite();
        directoryOrLoader = path.dirname(stack[1].getFileName());
      }
      if (!isWindow) {
        this.directory = path.normalize(this.directory);
      }
    }

    Json.prototype.load = function(parent, name, language) {
      var data, e, _path;
      _path = this.getFileSystemPath(parent, name, language);
      try {
        data = require(_path);
      } catch (_error) {
        e = _error;
        data = {};
      }
      return data;
    };

    Json.prototype.getFileSystemPath = function(parent, name, language) {
      return this.directory + (parent !== '' ? '/' + parent : '') + ("/" + language + "." + name + ".json");
    };

    return Json;

  })(Loader);

  module.exports = Json;

}).call(this);
